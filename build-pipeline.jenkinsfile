pipeline {
    agent { label 'build-node' }

    parameters {
        string (
            defaultValue: 'riot/master',
            description: 'RIOT version to build with remote',
            name: 'RIOT_VERSION',
            trim: true
        )
        string (
            defaultValue: 'CONNECTED_BOARDS',
            description: 'List of boards to test',
            name: 'BOARDS',
            trim: true
        )
        string (
            defaultValue: ' --with-test-only  --incremental',
            description: '''args for compile_and_test_for_board script''',
            name: 'COMPILE_AND_TEST_ARGS'
        )
        string (
            defaultValue: '',
            description: '''environment vars for compile_and_test_for_board script
                         To pass USEMODULE and CFLAGS use:
                         DOCKER_ENVIRONMENT_CMDLINE=\'-e USEMODULE=<name>\'
                         DOCKER_ENVIRONMENT_CMDLINE=\'-e CFLAGS=-D<flag>\'''',
            name: 'COMPILE_AND_TEST_VARS'
        )
    }

    stages {
        stage("setup"){
            steps{
                script {
                    currentBuild.displayName = "${currentBuild.number}-${params.RIOT_VERSION}"
                }
                script{
                    if (params.BOARDS == 'CONNECTED_BOARDS') {
                        env.BUILD_BOARDS = sh(script: "make -C /builds/boards/ list-boards --no-print-directory", returnStdout: true).trim()
                    } else {
                        env.BUILD_BOARDS = params.BOARDS
                    }
                }
            }
        }
        stage('RIOT.git') {
            steps {
                build job: 'RIOT.git.jk',
                    parameters: [
                        [
                            $class: 'LabelParameterValue',
                            name: 'node',
                            label: 'build-node'
                        ],
                        string ( 
                            name: 'RIOT_VERSION',
                            value: String.valueOf(env.RIOT_VERSION)
                        )
                    ]
            }
        }
        stage ('build-clean') {
            steps {
                ws("workspace/results/") {
                    sh "rm -rf -- *"
                }
            }
        }
        stage ('build-boards') {
            steps {
                build job: 'build-boards.jk',
                    parameters: [
                        [
                            $class: 'LabelParameterValue',
                            name: 'node',
                            label: 'build-node'
                        ],
                        string (
                            name: 'BOARDS',
                            value: String.valueOf(env.BUILD_BOARDS)
                        ),
                        string (
                            name: 'RIOT_VERSION',
                            value: String.valueOf(env.RIOT_VERSION)
                        ),
                        string (
                            name: 'COMPILE_AND_TEST_ARGS',
                            value: String.valueOf(env.COMPILE_AND_TEST_ARGS)
                        ),
                        string (
                            name: 'COMPILE_AND_TEST_VARS',
                            value: String.valueOf(env.COMPILE_AND_TEST_VARS)
                        )
                    ]
            }
        }
        stage ('build-results') {
            steps {
                ws("workspace/results/") {
                    sh "cp -ru build@*/* build/ || true"
                }
                ws("workspace/results/build") {
                    sh label: '', script: '''
                    python /builds/scripts/ci_aggregate.py .
                    '''
                }
            }
            post {
                always {
                    ws("workspace/results/build") {
                        archiveArtifacts artifacts: '**'
                        cleanWs()
                    }
                }
            }
        }
    }
}

